// Do not edit this file (edit "../test/toxy/setup.wid", and run "make").
//
"puts stderr [concat loading built-in widget definitions]\n"
"package provide toxywidgets 0.1.0.17\n"
"\n"
"# LATER keep standard widget setup in a .tcl file (transfered into a .wiq), and\n"
"# glue separate .wid files with standard widget definitions into another .wiq\n"
"# LATER think about using a slave interpreter, and a toxy-specific connection\n"
"# LATER gather aqua incompatibilities, and decide, if there is no other\n"
"# way than branching (different meaning of -bg, -borderwidth trouble,\n"
"# right click, etc.)\n"
"\n"
"# LATER ask for adding something of the sort to pd.tk:\n"
"bind Canvas <1> {+focus %W}\n"
"\n"
"# FIXME args\n"
"proc ::toxy::package_require {pkg dll} {\n"
"    if {[catch {package require $pkg} res] == 0} {\n"
"	puts stderr \"using package $pkg $res\"\n"
"    } elseif {[catch {load $dll $pkg}] != 0} {\n"
"	puts stderr \"ERROR: missing package $pkg ($res)\"\n"
"    }\n"
"}\n"
"\n"
"# valid options: \"show\", \"hide\"\n"
"proc ::toxy::console {op} {\n"
"    if {[catch {::console $op}]} {\n"
"	if {[catch {package require tkcon}] == 0} {\n"
"	    tkcon $op\n"
"	}\n"
"    }\n"
"}\n"
"\n"
"# FIXME this should be explicitly requested\n"
"# In order to keep the state after tk canvas has been destroyed\n"
"# try setting -variable and -textvariable traces\n"
"\n"
"proc ::toxy::item_dotrace {target varname ndxname op} {\n"
"    if {[catch {set v [set $varname]} res] == 0} {\n"
"	if {$v != [set $varname.last]} {\n"
"# FIXME activate this on demand (for explicit traces)\n"
"#	    pd $target.rp _data $v \\;\n"
"	    set $varname.last $v\n"
"	}\n"
"    } else { puts stderr [concat failed ::toxy::item_dotrace: $res] }\n"
"}\n"
"\n"
"proc ::toxy::item_bindtrace {varname mastername ndxname op} {\n"
"    set $varname [set $mastername]\n"
"}\n"
"\n"
"proc ::toxy::item_settrace {op path target varname} {\n"
"    if {[catch {$path cget $op} res] == 0} {\n"
"	if {$res == \"\"} {\n"
"	    if {[catch {$path config $op $varname} err]} {\n"
"		error $err\n"
"	    }\n"
"	} else {\n"
"	    if {[info tclversion] < 8.4} {\n"
"		trace variable $res w \"::toxy::item_bindtrace $varname\"\n"
"	    } else {\n"
"		trace add variable $res write \"::toxy::item_bindtrace $varname\"\n"
"	    }\n"
"	}\n"
"	if {![info exists $varname.last]} { set $varname.last \"\" }\n"
"	if {[info tclversion] < 8.4} {\n"
"	    trace variable $varname w \"::toxy::item_dotrace $target\"\n"
"	} else {\n"
"	    trace add variable $varname write \"::toxy::item_dotrace $target\"\n"
"	}\n"
"	return\n"
"    } else { return 0 }\n"
"}\n"
"\n"
"# LATER revisit -- seems clumsy and fragile\n"
"proc ::toxy::item_removetrace {op path varname} {\n"
"    if {[catch {$path cget $op} res] == 0} {\n"
"	if {$res == $varname} {\n"
"	    if {[catch {$path config $op \"\"} err]} {\n"
"		error $err\n"
"	    }\n"
"	} elseif {$res != \"\"} {\n"
"	    if {[info tclversion] < 8.4} {\n"
"		catch { trace vdelete $res w \"::toxy::item_bindtrace $varname\" }\n"
"	    } else {\n"
"		catch { trace remove variable \\\n"
"		    $res write \"::toxy::item_bindtrace $varname\" }\n"
"	    }\n"
"	}\n"
"    }\n"
"}\n"
"\n"
"proc ::toxy::item_destroy {path varname} {\n"
"    ::toxy::item_removetrace -variable $path $varname.var\n"
"    ::toxy::item_removetrace -textvariable $path $varname.txt\n"
"    if {[info tclversion] < 8.4} {\n"
"	catch { unset $varname.last $varname.var $varname.txt $varname }\n"
"    } else {\n"
"	unset -nocomplain $varname.last $varname.var $varname.txt $varname\n"
"    }\n"
"    catch {destroy $path}\n"
"}\n"
"\n"
"proc ::toxy::item_getconfig {path target} {\n"
"    set wd [winfo reqwidth $path]\n"
"    set ht [winfo reqheight $path]\n"
"    if {$wd < 2 || $ht < 2} {\n"
"# LATER rethink\n"
"	update idletasks\n"
"	set wd [winfo width $path]\n"
"	set ht [winfo height $path]\n"
"    }\n"
"    pd $target.rp _config $target.rp [$path cget -bg] $wd $ht \\\n"
"	[catch {$path config -state normal}]\\;\n"
"}\n"
"\n"
"proc ::toxy::item_visconfig {path target name varname cvpath px py} {\n"
"    if {[info exists ::toxy::itemoptions]} {\n"
"	set failed [catch {eval $path config $::toxy::itemoptions} res]\n"
"	unset ::toxy::itemoptions\n"
"	if {$failed} { error [concat in $path config: $res] }\n"
"    }\n"
"\n"
"    if {[info exists ::toxy::longnewhook]} {\n"
"	set failed [catch {eval $::toxy::longnewhook} res]\n"
"	unset ::toxy::longnewhook\n"
"	if {$failed} { error [concat in ::toxy::longnewhook: $res] }\n"
"    }\n"
"\n"
"    $cvpath create window $px $py \\\n"
"	-anchor nw -window $path -tags [concat toxy$name $target]\n"
"\n"
"# FIXME use ${name}::explicittrace\n"
"    if {[info exists ::toxy::storethispath]} {\n"
"# FIXME explicit traces\n"
"	set needtraces 0\n"
"    } else {\n"
"	set needtraces 1\n"
"    }\n"
"\n"
"    if {$needtraces != 0} {\n"
"	if {[catch {::toxy::item_settrace -variable \\\n"
"		$path $target $varname.var} res1]} {\n"
"	    error [concat in ::toxy::item_settrace: $res1]\n"
"	}\n"
"	if {[catch {::toxy::item_settrace -textvariable \\\n"
"		$path $target $varname.txt} res2]} {\n"
"	    error [concat in ::toxy::item_settrace: $res2]\n"
"	}\n"
"#	puts stderr [concat traces: ($res1) ($res2)]\n"
"	if {$res1 == 0 && $res2 == 0} {\n"
"#	    puts stderr [concat toxy warning: $path untraceable]\n"
"	}\n"
"    }\n"
"\n"
"    set failed [catch {::toxy::master $path $cvpath $target} res]\n"
"    if {$failed} { error [concat in ::toxy::master: $res] }\n"
"\n"
"    if {[info exists ::toxy::longvishook]} {\n"
"	set failed [catch {eval $::toxy::longvishook} res]\n"
"	unset ::toxy::longvishook\n"
"	if {$failed} { error [concat in ::toxy::longvishook: $res] }\n"
"    }\n"
"    if {[info exists ::toxy::shortvishook]} {\n"
"	set failed [catch {eval $::toxy::shortvishook} res]\n"
"	unset ::toxy::shortvishook\n"
"	if {$failed} { error [concat in ::toxy::shortvishook: $res] }\n"
"    }\n"
"\n"
"    ::toxy::item_getconfig $path $target\n"
"\n"
"    return\n"
"}\n"
"\n"
"proc ::toxy::item_vis {tkclass path target name varname cvpath px py} {\n"
"    if {[winfo exists $path]} {\n"
"#	puts stderr [concat $path exists]\n"
"	set ::toxy::itemfailure 0\n"
"    } else {\n"
"	set ::toxy::itemfailure [catch {$tkclass $path} ::toxy::itemerrmess]\n"
"    }\n"
"    if {$::toxy::itemfailure == 0} {\n"
"	set ::toxy::itemfailure [catch {::toxy::item_visconfig \\\n"
"	    $path $target $name $varname $cvpath $px $py} \\\n"
"	    ::toxy::itemerrmess]\n"
"    }\n"
"    if {$::toxy::itemfailure} {\n"
"	if {[winfo exists $path]} {destroy $path}\n"
"	puts stderr [concat tcl error: $::toxy::itemerrmess]\n"
"	pd $target.rp _failure \\;\n"
"    }\n"
"}\n"
"\n"
"# empirically, binding event coords as %X - [winfo rootx $cvpath] works\n"
"# better, than %x + [winfo x %W], or %x + t->te_xpix, LATER investigate\n"
"\n"
"proc ::toxy::item_click {target cvpath x y b f} {\n"
"    pd $target.rp _click \\\n"
"	[$cvpath canvasx [expr {$x - [winfo rootx $cvpath]}]] \\\n"
"	[$cvpath canvasy [expr {$y - [winfo rooty $cvpath]}]] $b $f\\;\n"
"}\n"
"\n"
"proc ::toxy::item_inout {target v} {\n"
"    pd [concat $target.rp _inout $v \\;]\n"
"}\n"
"\n"
"proc ::toxy::master_release {target cvpath x y b} {\n"
"    ::toxy::item_inout $target 3\n"
"# pdtk_canvas_mouseup is a hack, which we must call anyway\n"
"    pdtk_canvas_mouseup $cvpath \\\n"
"	[expr {$x - [winfo rootx $cvpath]}] \\\n"
"	[expr {$y - [winfo rooty $cvpath]}] $b\n"
"}\n"
"\n"
"proc ::toxy::master_motion {target cvpath x y} {\n"
"    pd $target.rp _motion \\\n"
"	[$cvpath canvasx [expr {$x - [winfo rootx $cvpath]}]] \\\n"
"	[$cvpath canvasy [expr {$y - [winfo rooty $cvpath]}]] 0 \\;\n"
"}\n"
"\n"
"proc ::toxy::master {path cvpath target} {\n"
"    bind $path <ButtonRelease> \"::toxy::master_release $target $cvpath %X %Y %b\"\n"
"    bind $path <1> \"::toxy::item_click $target $cvpath %X %Y %b 0\"\n"
"    bind $path <Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 1\"\n"
"    bind $path <Control-1> \"::toxy::item_click $target $cvpath %X %Y %b 2\"\n"
"    bind $path <Control-Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 3\"\n"
"    bind $path <Alt-1> \"::toxy::item_click $target $cvpath %X %Y %b 4\"\n"
"    bind $path <Alt-Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 5\"\n"
"    bind $path <Alt-Control-1> \"::toxy::item_click $target $cvpath %X %Y %b 6\"\n"
"    bind $path <Alt-Control-Shift-1> \\\n"
"	\"::toxy::item_click $target $cvpath %X %Y %b 7\"\n"
"    bind $path <3> \"::toxy::item_click $target $cvpath %X %Y %b 8\"\n"
"\n"
"    bind $path <Motion> \"::toxy::master_motion $target $cvpath %X %Y\"\n"
"    bind $path <B1-Motion> \"::toxy::master_motion $target $cvpath %X %Y\"\n"
"    bind $path <Enter> \"::toxy::item_inout $target 1\"\n"
"    bind $path <Leave> \"::toxy::item_inout $target 0\"\n"
"\n"
"    if {[catch {$path config -state normal}] == 0} {\n"
"	bind $path <<disable>> \"$path config -state disabled\"\n"
"	bind $path <<enable>> \"$path config -state normal\"\n"
"    }\n"
"\n"
"    if {[winfo class $path] == \"Canvas\"} {\n"
"# undo the \"bind Canvas <1> {+focus %W}\" from above\n"
"	bind $path <FocusIn> \"focus $cvpath\"\n"
"    }\n"
"}\n"
"\n"
"# to be called explicitly from vis proc, LATER rethink\n"
"proc ::toxy::subwidget {path parent cvpath target} {\n"
"    bind $path <ButtonRelease> \"::toxy::master_release $target $cvpath %X %Y %b\"\n"
"    bind $path <1> \"::toxy::item_click $target $cvpath %X %Y %b 0\"\n"
"    bind $path <Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 1\"\n"
"    bind $path <Control-1> \"::toxy::item_click $target $cvpath %X %Y %b 2\"\n"
"    bind $path <Control-Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 3\"\n"
"    bind $path <Alt-1> \"::toxy::item_click $target $cvpath %X %Y %b 4\"\n"
"    bind $path <Alt-Shift-1> \"::toxy::item_click $target $cvpath %X %Y %b 5\"\n"
"    bind $path <Alt-Control-1> \"::toxy::item_click $target $cvpath %X %Y %b 6\"\n"
"    bind $path <Alt-Control-Shift-1> \\\n"
"	\"::toxy::item_click $target $cvpath %X %Y %b 7\"\n"
"    bind $path <3> \"::toxy::item_click $target $cvpath %X %Y %b 8\"\n"
"\n"
"    bind $path <Motion> \"::toxy::master_motion $target $cvpath %X %Y\"\n"
"    bind $path <B1-Motion> \"::toxy::master_motion $target $cvpath %X %Y\"\n"
"    bind $path <Enter> \"::toxy::item_inout $target 1\"\n"
"    bind $path <Leave> \"::toxy::item_inout $target 0\"\n"
"\n"
"    if {[catch {$path config -state normal}] == 0} {\n"
"	bind $parent <<disable>> \"+$path config -state disabled\"\n"
"	bind $parent <<enable>> \"+$path config -state normal\"\n"
"    }\n"
"}\n"
"\n"
"# standard widget types, LATER move to separate .wid files\n"
"\n"
"# FIXME\n"
"proc ::toxy::scale_command {target sel v} {\n"
"    if {$::toxy::scale_isactive} {\n"
"	pd [concat $target $sel $v \\;]\n"
"    }\n"
"    set ::toxy::scale_isactive 1\n"
"}\n"
"\n"
"proc ::toxy::scale_doset {path v} {\n"
"    set ::toxy::scale_isactive 0\n"
"    $path set $v\n"
"}\n"
"\n"
"proc ::toxy::popup_command {path target remote i text} {\n"
"    set [$path cget -textvariable] $text\n"
"    pd [concat $target _cb $i \\;]\n"
"    if {$remote != \".\"} {\n"
"	pd [concat $remote $i \\;]\n"
"    }\n"
"}\n"
"\n"
"proc ::toxy::popup {path target remote entries args} {\n"
"    if {[winfo exists $path.pop]} {\n"
"#	puts stderr [concat $path.pop exists]\n"
"    } elseif {[catch {eval {menu $path.pop} $args} err] == 0} {\n"
"	set i 0\n"
"	foreach e $entries {\n"
"	    if {$e == \".\"} {\n"
"		$path.pop add separator\n"
"	    } else {\n"
"		incr i\n"
"		$path.pop add command -label [lindex $e 0] \\\n"
"		    -command [concat ::toxy::popup_command \\\n"
"			$path $target $remote $i \\\n"
"			    [lindex $e [expr {[llength $e] > 1}]]]\n"
"	    }\n"
"	}\n"
"    } else { error [concat in ::toxy::popup: $err] }\n"
"}\n"
"\n"
"# FIXME should be part of the float widget type, but we need it for plain scales\n"
"set ::toxy::scale_isactive 1\n"
"\n"
"#> bang button\n"
"#. -image ::toxy::img::empty -command .<.>\n"
"#. -bg pink -activebackground red -width 50 -height 50\n"
"#. @bang .- flash .: .- invoke\n"
"\n"
"#> float scale\n"
"#. -command [concat ::toxy::scale_command .| _cb]\n"
"#. -bg pink -activebackground red -length 200\n"
"#. @float .- set .#1\n"
"#. @vset ::toxy::scale_doset .- .#1\n"
"\n"
"#> symbol entry\n"
"#. -bg pink -font .(helvetica 24.) -width 16\n"
"#. @symbol .- delete 0 end .: .- insert 0 .#1\n"
"\n"
"#@ vis\n"
"bind .- <Return> {eval .<[.- get].>; focus .^.c}\n"
"\n"
"#> popup menubutton\n"
"#. -menu .-.pop\n"
"#. -bg purple -fg white -activebackground magenta -text popup\n"
"#. -width 8 -relief raised -borderwidth 3\n"
"#. @float if .(.#1 >= 1.) .(.-.pop invoke .#1.)\n"
"#. #items test\n"
"#. #iprops \"-bg\" purple \"-fg\" white \"-activebackground\" magenta \"-borderwidth\" 3\n"
"\n"
"#@ vis\n"
"::toxy::popup .- .| . [concat .#items] .#iprops\n"
